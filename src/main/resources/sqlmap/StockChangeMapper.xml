<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="guru.springframework.dao.StockChangeMapper" >
  <resultMap id="BaseResultMap" type="guru.springframework.domain.entity.StockChange" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="product_id" property="productId" jdbcType="BIGINT" />
    <result column="before_num" property="beforeNum" jdbcType="INTEGER" />
    <result column="after_num" property="afterNum" jdbcType="INTEGER" />
    <result column="change_num" property="changeNum" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, product_id, before_num, after_num, change_num, create_time, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="guru.springframework.domain.example.StockChangeExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from stock_change
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select
    <include refid="Base_Column_List" />
    from stock_change
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from stock_change
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="guru.springframework.domain.example.StockChangeExample" >
    delete from stock_change
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="guru.springframework.domain.entity.StockChange" >
    insert into stock_change (id, product_id, before_num,
      after_num, change_num, create_time,
      update_time)
    values (#{id,jdbcType=BIGINT}, #{productId,jdbcType=BIGINT}, #{beforeNum,jdbcType=INTEGER},
      #{afterNum,jdbcType=INTEGER}, #{changeNum,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP},
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="guru.springframework.domain.entity.StockChange" useGeneratedKeys="true"
          keyProperty="id">
    insert into stock_change
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="productId != null" >
        product_id,
      </if>
      <if test="beforeNum != null" >
        before_num,
      </if>
      <if test="afterNum != null" >
        after_num,
      </if>
      <if test="changeNum != null" >
        change_num,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="productId != null" >
        #{productId,jdbcType=BIGINT},
      </if>
      <if test="beforeNum != null" >
        #{beforeNum,jdbcType=INTEGER},
      </if>
      <if test="afterNum != null" >
        #{afterNum,jdbcType=INTEGER},
      </if>
      <if test="changeNum != null" >
        #{changeNum,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="guru.springframework.domain.example.StockChangeExample" resultType="java.lang.Integer" >
    select count(*) from stock_change
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update stock_change
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.productId != null" >
        product_id = #{record.productId,jdbcType=BIGINT},
      </if>
      <if test="record.beforeNum != null" >
        before_num = #{record.beforeNum,jdbcType=INTEGER},
      </if>
      <if test="record.afterNum != null" >
        after_num = #{record.afterNum,jdbcType=INTEGER},
      </if>
      <if test="record.changeNum != null" >
        change_num = #{record.changeNum,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update stock_change
    set id = #{record.id,jdbcType=BIGINT},
    product_id = #{record.productId,jdbcType=BIGINT},
    before_num = #{record.beforeNum,jdbcType=INTEGER},
    after_num = #{record.afterNum,jdbcType=INTEGER},
    change_num = #{record.changeNum,jdbcType=INTEGER},
    create_time = #{record.createTime,jdbcType=TIMESTAMP},
    update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="guru.springframework.domain.entity.StockChange" >
    update stock_change
    <set >
      <if test="productId != null" >
        product_id = #{productId,jdbcType=BIGINT},
      </if>
      <if test="beforeNum != null" >
        before_num = #{beforeNum,jdbcType=INTEGER},
      </if>
      <if test="afterNum != null" >
        after_num = #{afterNum,jdbcType=INTEGER},
      </if>
      <if test="changeNum != null" >
        change_num = #{changeNum,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="guru.springframework.domain.entity.StockChange" >
    update stock_change
    set product_id = #{productId,jdbcType=BIGINT},
      before_num = #{beforeNum,jdbcType=INTEGER},
      after_num = #{afterNum,jdbcType=INTEGER},
      change_num = #{changeNum,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>